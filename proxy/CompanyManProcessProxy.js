// **********************************************************************
// Parsed By TarsParser(2.4.5), Generated By tars2node(20200707)
// TarsParser Maintained By <TARS> and tars2node Maintained By <superzheng>
// Generated from "CompanyManProcess.tars" by Client Mode
// **********************************************************************

/* eslint-disable */

"use strict";

var assert    = require("assert");
var TarsStream = require("@tars/stream");
var TarsError  = require("@tars/rpc").error;

var _hasOwnProperty = Object.prototype.hasOwnProperty;
var _makeError = function (data, message, type) {
    var error = new Error(message || "");
    error.request = data.request;
    error.response = {
        "costtime" : data.request.costtime
    };
    if (type === TarsError.CLIENT.DECODE_ERROR) {
        error.name = "DECODE_ERROR";
        error.response.error = {
            "code" : type,
            "message" : message
        };
    } else {
        error.name = "RPC_ERROR";
        error.response.error = data.error;
    }
    return error;
};

var CivetCompanyCenter = CivetCompanyCenter || {};
module.exports.CivetCompanyCenter = CivetCompanyCenter;

CivetCompanyCenter.CompanyManProcessProxy = function () {
    this._name    = undefined;
    this._worker  = undefined;
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.setTimeout = function (iTimeout) {
    this._worker.timeout = iTimeout;
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.getTimeout = function () {
    return this._worker.timeout;
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.setVersion = function (iVersion) {
    this._worker.version = iVersion;
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.getVersion = function () {
    return this._worker.version;
};

CivetCompanyCenter.Company = function() {
    this.id = 0;
    this.name = "";
    this.address = "";
    this.contact = "";
    this.email = "";
    this.roleID = 0;
    this._classname = "CivetCompanyCenter.Company";
};
CivetCompanyCenter.Company._classname = "CivetCompanyCenter.Company";
CivetCompanyCenter.Company._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetCompanyCenter.Company._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetCompanyCenter.Company._readFrom = function (is) {
    var tmp = new CivetCompanyCenter.Company;
    tmp.id = is.readInt32(0, true, 0);
    tmp.name = is.readString(1, false, "");
    tmp.address = is.readString(2, false, "");
    tmp.contact = is.readString(3, false, "");
    tmp.email = is.readString(4, false, "");
    tmp.roleID = is.readInt32(5, false, 0);
    return tmp;
};
CivetCompanyCenter.Company.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.name);
    os.writeString(2, this.address);
    os.writeString(3, this.contact);
    os.writeString(4, this.email);
    os.writeInt32(5, this.roleID);
};
CivetCompanyCenter.Company.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetCompanyCenter.Company.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetCompanyCenter.Company.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "name" : this.name,
        "address" : this.address,
        "contact" : this.contact,
        "email" : this.email,
        "roleID" : this.roleID
    };
};
CivetCompanyCenter.Company.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "address") && (this.address = json.address);
    _hasOwnProperty.call(json, "contact") && (this.contact = json.contact);
    _hasOwnProperty.call(json, "email") && (this.email = json.email);
    _hasOwnProperty.call(json, "roleID") && (this.roleID = json.roleID);
    return this;
};
CivetCompanyCenter.Company.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetCompanyCenter.Company.new = function () {
    return new CivetCompanyCenter.Company();
};
CivetCompanyCenter.Company.create = function (is) {
    return CivetCompanyCenter.Company._readFrom(is);
};

CivetCompanyCenter.CompanyHasRole = function() {
    this.id = 0;
    this.Company_id = 0;
    this.Role_id = 0;
    this.create_time = 0;
    this.update_time = 0;
    this.uni_id = "";
    this._classname = "CivetCompanyCenter.CompanyHasRole";
};
CivetCompanyCenter.CompanyHasRole._classname = "CivetCompanyCenter.CompanyHasRole";
CivetCompanyCenter.CompanyHasRole._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetCompanyCenter.CompanyHasRole._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetCompanyCenter.CompanyHasRole._readFrom = function (is) {
    var tmp = new CivetCompanyCenter.CompanyHasRole;
    tmp.id = is.readInt32(0, false, 0);
    tmp.Company_id = is.readInt32(1, false, 0);
    tmp.Role_id = is.readInt32(2, false, 0);
    tmp.create_time = is.readInt32(3, false, 0);
    tmp.update_time = is.readInt32(4, false, 0);
    tmp.uni_id = is.readString(5, false, "");
    return tmp;
};
CivetCompanyCenter.CompanyHasRole.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.Company_id);
    os.writeInt32(2, this.Role_id);
    os.writeInt32(3, this.create_time);
    os.writeInt32(4, this.update_time);
    os.writeString(5, this.uni_id);
};
CivetCompanyCenter.CompanyHasRole.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetCompanyCenter.CompanyHasRole.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetCompanyCenter.CompanyHasRole.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "Company_id" : this.Company_id,
        "Role_id" : this.Role_id,
        "create_time" : this.create_time,
        "update_time" : this.update_time,
        "uni_id" : this.uni_id
    };
};
CivetCompanyCenter.CompanyHasRole.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "Company_id") && (this.Company_id = json.Company_id);
    _hasOwnProperty.call(json, "Role_id") && (this.Role_id = json.Role_id);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "update_time") && (this.update_time = json.update_time);
    _hasOwnProperty.call(json, "uni_id") && (this.uni_id = json.uni_id);
    return this;
};
CivetCompanyCenter.CompanyHasRole.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetCompanyCenter.CompanyHasRole.new = function () {
    return new CivetCompanyCenter.CompanyHasRole();
};
CivetCompanyCenter.CompanyHasRole.create = function (is) {
    return CivetCompanyCenter.CompanyHasRole._readFrom(is);
};

CivetCompanyCenter.Role = function() {
    this.id = 0;
    this.roleName = "";
    this.summarize = "";
    this.createTime = 0;
    this.updateTime = 0;
    this._classname = "CivetCompanyCenter.Role";
};
CivetCompanyCenter.Role._classname = "CivetCompanyCenter.Role";
CivetCompanyCenter.Role._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetCompanyCenter.Role._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetCompanyCenter.Role._readFrom = function (is) {
    var tmp = new CivetCompanyCenter.Role;
    tmp.id = is.readInt32(0, false, 0);
    tmp.roleName = is.readString(1, false, "");
    tmp.summarize = is.readString(2, false, "");
    tmp.createTime = is.readInt32(3, false, 0);
    tmp.updateTime = is.readInt32(4, false, 0);
    return tmp;
};
CivetCompanyCenter.Role.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.roleName);
    os.writeString(2, this.summarize);
    os.writeInt32(3, this.createTime);
    os.writeInt32(4, this.updateTime);
};
CivetCompanyCenter.Role.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetCompanyCenter.Role.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetCompanyCenter.Role.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "roleName" : this.roleName,
        "summarize" : this.summarize,
        "createTime" : this.createTime,
        "updateTime" : this.updateTime
    };
};
CivetCompanyCenter.Role.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "roleName") && (this.roleName = json.roleName);
    _hasOwnProperty.call(json, "summarize") && (this.summarize = json.summarize);
    _hasOwnProperty.call(json, "createTime") && (this.createTime = json.createTime);
    _hasOwnProperty.call(json, "updateTime") && (this.updateTime = json.updateTime);
    return this;
};
CivetCompanyCenter.Role.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetCompanyCenter.Role.new = function () {
    return new CivetCompanyCenter.Role();
};
CivetCompanyCenter.Role.create = function (is) {
    return CivetCompanyCenter.Role._readFrom(is);
};

CivetCompanyCenter.RoleHasPermission = function() {
    this.id = 0;
    this.role_id = 0;
    this.Permission_id = 0;
    this.create_time = 0;
    this.update_time = 0;
    this.uni_id = "";
    this._classname = "CivetCompanyCenter.RoleHasPermission";
};
CivetCompanyCenter.RoleHasPermission._classname = "CivetCompanyCenter.RoleHasPermission";
CivetCompanyCenter.RoleHasPermission._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetCompanyCenter.RoleHasPermission._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetCompanyCenter.RoleHasPermission._readFrom = function (is) {
    var tmp = new CivetCompanyCenter.RoleHasPermission;
    tmp.id = is.readInt32(0, false, 0);
    tmp.role_id = is.readInt32(1, false, 0);
    tmp.Permission_id = is.readInt32(2, false, 0);
    tmp.create_time = is.readInt32(3, false, 0);
    tmp.update_time = is.readInt32(4, false, 0);
    tmp.uni_id = is.readString(5, false, "");
    return tmp;
};
CivetCompanyCenter.RoleHasPermission.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeInt32(1, this.role_id);
    os.writeInt32(2, this.Permission_id);
    os.writeInt32(3, this.create_time);
    os.writeInt32(4, this.update_time);
    os.writeString(5, this.uni_id);
};
CivetCompanyCenter.RoleHasPermission.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetCompanyCenter.RoleHasPermission.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetCompanyCenter.RoleHasPermission.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "role_id" : this.role_id,
        "Permission_id" : this.Permission_id,
        "create_time" : this.create_time,
        "update_time" : this.update_time,
        "uni_id" : this.uni_id
    };
};
CivetCompanyCenter.RoleHasPermission.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "role_id") && (this.role_id = json.role_id);
    _hasOwnProperty.call(json, "Permission_id") && (this.Permission_id = json.Permission_id);
    _hasOwnProperty.call(json, "create_time") && (this.create_time = json.create_time);
    _hasOwnProperty.call(json, "update_time") && (this.update_time = json.update_time);
    _hasOwnProperty.call(json, "uni_id") && (this.uni_id = json.uni_id);
    return this;
};
CivetCompanyCenter.RoleHasPermission.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetCompanyCenter.RoleHasPermission.new = function () {
    return new CivetCompanyCenter.RoleHasPermission();
};
CivetCompanyCenter.RoleHasPermission.create = function (is) {
    return CivetCompanyCenter.RoleHasPermission._readFrom(is);
};

CivetCompanyCenter.CPermission = function() {
    this.id = 0;
    this.tag = "";
    this.name = "";
    this.summarize = "";
    this._classname = "CivetCompanyCenter.CPermission";
};
CivetCompanyCenter.CPermission._classname = "CivetCompanyCenter.CPermission";
CivetCompanyCenter.CPermission._write = function (os, tag, value) { os.writeStruct(tag, value); };
CivetCompanyCenter.CPermission._read  = function (is, tag, def) { return is.readStruct(tag, true, def); };
CivetCompanyCenter.CPermission._readFrom = function (is) {
    var tmp = new CivetCompanyCenter.CPermission;
    tmp.id = is.readInt32(0, false, 0);
    tmp.tag = is.readString(1, false, "");
    tmp.name = is.readString(2, false, "");
    tmp.summarize = is.readString(3, false, "");
    return tmp;
};
CivetCompanyCenter.CPermission.prototype._writeTo = function (os) {
    os.writeInt32(0, this.id);
    os.writeString(1, this.tag);
    os.writeString(2, this.name);
    os.writeString(3, this.summarize);
};
CivetCompanyCenter.CPermission.prototype._equal = function () {
    assert.fail("this structure not define key operation");
};
CivetCompanyCenter.CPermission.prototype._genKey = function () {
    if (!this._proto_struct_name_) {
        this._proto_struct_name_ = "STRUCT" + Math.random();
    }
    return this._proto_struct_name_;
};
CivetCompanyCenter.CPermission.prototype.toObject = function() { 
    return {
        "id" : this.id,
        "tag" : this.tag,
        "name" : this.name,
        "summarize" : this.summarize
    };
};
CivetCompanyCenter.CPermission.prototype.readFromObject = function(json) { 
    _hasOwnProperty.call(json, "id") && (this.id = json.id);
    _hasOwnProperty.call(json, "tag") && (this.tag = json.tag);
    _hasOwnProperty.call(json, "name") && (this.name = json.name);
    _hasOwnProperty.call(json, "summarize") && (this.summarize = json.summarize);
    return this;
};
CivetCompanyCenter.CPermission.prototype.toBinBuffer = function () {
    var os = new TarsStream.TarsOutputStream();
    this._writeTo(os);
    return os.getBinBuffer();
};
CivetCompanyCenter.CPermission.new = function () {
    return new CivetCompanyCenter.CPermission();
};
CivetCompanyCenter.CPermission.create = function (is) {
    return CivetCompanyCenter.CPermission._readFrom(is);
};

var __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$IF = {
    "name" : "bindCompanyAndRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "newCompanyHasRole",
        "class" : "CivetCompanyCenter.CompanyHasRole",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$IE = function (newCompanyHasRole) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newCompanyHasRole);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$PE = function (newCompanyHasRole, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newCompanyHasRole", newCompanyHasRole);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::bindCompanyAndRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.bindCompanyAndRole = function (newCompanyHasRole) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("bindCompanyAndRole", __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$PE(newCompanyHasRole, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$IF).then(__CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$PD, __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$ER);
    } else {
        return this._worker.tars_invoke("bindCompanyAndRole", __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$IE(newCompanyHasRole), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$IF).then(__CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$ID, __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.bindCompanyAndRole = __CivetCompanyCenter_CompanyManProcess$bindCompanyAndRole$IF;

var __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$IF = {
    "name" : "bindRoleAndPermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "newRoleHasPermission",
        "class" : "CivetCompanyCenter.RoleHasPermission",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$IE = function (newRoleHasPermission) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newRoleHasPermission);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$PE = function (newRoleHasPermission, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newRoleHasPermission", newRoleHasPermission);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::bindRoleAndPermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.bindRoleAndPermissions = function (newRoleHasPermission) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("bindRoleAndPermissions", __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$PE(newRoleHasPermission, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$PD, __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$ER);
    } else {
        return this._worker.tars_invoke("bindRoleAndPermissions", __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$IE(newRoleHasPermission), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$ID, __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.bindRoleAndPermissions = __CivetCompanyCenter_CompanyManProcess$bindRoleAndPermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$IF = {
    "name" : "checkCompanyHasPermissionsByID",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "PermissionID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$IE = function (CompanyID, PermissionID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeInt32(2, PermissionID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$PE = function (CompanyID, PermissionID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeInt32("PermissionID", PermissionID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::checkCompanyHasPermissionsByID failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.checkCompanyHasPermissionsByID = function (CompanyID, PermissionID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkCompanyHasPermissionsByID", __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$PE(CompanyID, PermissionID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$IF).then(__CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$PD, __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$ER);
    } else {
        return this._worker.tars_invoke("checkCompanyHasPermissionsByID", __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$IE(CompanyID, PermissionID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$IF).then(__CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$ID, __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.checkCompanyHasPermissionsByID = __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByID$IF;

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$IF = {
    "name" : "checkCompanyHasPermissionsByTag",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "PermissionsTag",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$IE = function (CompanyID, PermissionsTag) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    os.writeString(2, PermissionsTag);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$PE = function (CompanyID, PermissionsTag, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    tup.writeString("PermissionsTag", PermissionsTag);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::checkCompanyHasPermissionsByTag failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.checkCompanyHasPermissionsByTag = function (CompanyID, PermissionsTag) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("checkCompanyHasPermissionsByTag", __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$PE(CompanyID, PermissionsTag, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$IF).then(__CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$PD, __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$ER);
    } else {
        return this._worker.tars_invoke("checkCompanyHasPermissionsByTag", __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$IE(CompanyID, PermissionsTag), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$IF).then(__CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$ID, __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.checkCompanyHasPermissionsByTag = __CivetCompanyCenter_CompanyManProcess$checkCompanyHasPermissionsByTag$IF;

var __CivetCompanyCenter_CompanyManProcess$createCompany$IF = {
    "name" : "createCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "newCompany",
        "class" : "CivetCompanyCenter.Company",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$createCompany$IE = function (newCompany) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newCompany);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$createCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$createCompany$PE = function (newCompany, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newCompany", newCompany);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$createCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$createCompany$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::createCompany failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.createCompany = function (newCompany) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createCompany", __CivetCompanyCenter_CompanyManProcess$createCompany$PE(newCompany, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$createCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$createCompany$PD, __CivetCompanyCenter_CompanyManProcess$createCompany$ER);
    } else {
        return this._worker.tars_invoke("createCompany", __CivetCompanyCenter_CompanyManProcess$createCompany$IE(newCompany), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$createCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$createCompany$ID, __CivetCompanyCenter_CompanyManProcess$createCompany$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.createCompany = __CivetCompanyCenter_CompanyManProcess$createCompany$IF;

var __CivetCompanyCenter_CompanyManProcess$createPermissions$IF = {
    "name" : "createPermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "newCPermission",
        "class" : "CivetCompanyCenter.CPermission",
        "direction" : "in"
    }, {
        "name" : "c",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$createPermissions$IE = function (newCPermission) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newCPermission);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$createPermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "c" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$createPermissions$PE = function (newCPermission, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newCPermission", newCPermission);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$createPermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "c" : tup.readInt32("c")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$createPermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::createPermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.createPermissions = function (newCPermission) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createPermissions", __CivetCompanyCenter_CompanyManProcess$createPermissions$PE(newCPermission, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$createPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$createPermissions$PD, __CivetCompanyCenter_CompanyManProcess$createPermissions$ER);
    } else {
        return this._worker.tars_invoke("createPermissions", __CivetCompanyCenter_CompanyManProcess$createPermissions$IE(newCPermission), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$createPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$createPermissions$ID, __CivetCompanyCenter_CompanyManProcess$createPermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.createPermissions = __CivetCompanyCenter_CompanyManProcess$createPermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$createRole$IF = {
    "name" : "createRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "newRole",
        "class" : "CivetCompanyCenter.Role",
        "direction" : "in"
    }, {
        "name" : "c",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$createRole$IE = function (newRole) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, newRole);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$createRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "c" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$createRole$PE = function (newRole, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("newRole", newRole);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$createRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "c" : tup.readInt32("c")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$createRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::createRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.createRole = function (newRole) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("createRole", __CivetCompanyCenter_CompanyManProcess$createRole$PE(newRole, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$createRole$IF).then(__CivetCompanyCenter_CompanyManProcess$createRole$PD, __CivetCompanyCenter_CompanyManProcess$createRole$ER);
    } else {
        return this._worker.tars_invoke("createRole", __CivetCompanyCenter_CompanyManProcess$createRole$IE(newRole), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$createRole$IF).then(__CivetCompanyCenter_CompanyManProcess$createRole$ID, __CivetCompanyCenter_CompanyManProcess$createRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.createRole = __CivetCompanyCenter_CompanyManProcess$createRole$IF;

var __CivetCompanyCenter_CompanyManProcess$deleteCompany$IF = {
    "name" : "deleteCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$deleteCompany$IE = function (CompanyID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$deleteCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$deleteCompany$PE = function (CompanyID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$deleteCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$deleteCompany$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::deleteCompany failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.deleteCompany = function (CompanyID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deleteCompany", __CivetCompanyCenter_CompanyManProcess$deleteCompany$PE(CompanyID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$deleteCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$deleteCompany$PD, __CivetCompanyCenter_CompanyManProcess$deleteCompany$ER);
    } else {
        return this._worker.tars_invoke("deleteCompany", __CivetCompanyCenter_CompanyManProcess$deleteCompany$IE(CompanyID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$deleteCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$deleteCompany$ID, __CivetCompanyCenter_CompanyManProcess$deleteCompany$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.deleteCompany = __CivetCompanyCenter_CompanyManProcess$deleteCompany$IF;

var __CivetCompanyCenter_CompanyManProcess$deletePermissions$IF = {
    "name" : "deletePermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "PermissionsID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$deletePermissions$IE = function (PermissionsID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, PermissionsID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$deletePermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$deletePermissions$PE = function (PermissionsID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("PermissionsID", PermissionsID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$deletePermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$deletePermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::deletePermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.deletePermissions = function (PermissionsID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deletePermissions", __CivetCompanyCenter_CompanyManProcess$deletePermissions$PE(PermissionsID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$deletePermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$deletePermissions$PD, __CivetCompanyCenter_CompanyManProcess$deletePermissions$ER);
    } else {
        return this._worker.tars_invoke("deletePermissions", __CivetCompanyCenter_CompanyManProcess$deletePermissions$IE(PermissionsID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$deletePermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$deletePermissions$ID, __CivetCompanyCenter_CompanyManProcess$deletePermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.deletePermissions = __CivetCompanyCenter_CompanyManProcess$deletePermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$deleteRole$IF = {
    "name" : "deleteRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "roleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$deleteRole$IE = function (roleID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, roleID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$deleteRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$deleteRole$PE = function (roleID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("roleID", roleID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$deleteRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$deleteRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::deleteRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.deleteRole = function (roleID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("deleteRole", __CivetCompanyCenter_CompanyManProcess$deleteRole$PE(roleID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$deleteRole$IF).then(__CivetCompanyCenter_CompanyManProcess$deleteRole$PD, __CivetCompanyCenter_CompanyManProcess$deleteRole$ER);
    } else {
        return this._worker.tars_invoke("deleteRole", __CivetCompanyCenter_CompanyManProcess$deleteRole$IE(roleID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$deleteRole$IF).then(__CivetCompanyCenter_CompanyManProcess$deleteRole$ID, __CivetCompanyCenter_CompanyManProcess$deleteRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.deleteRole = __CivetCompanyCenter_CompanyManProcess$deleteRole$IF;

var __CivetCompanyCenter_CompanyManProcess$queryCompany$IF = {
    "name" : "queryCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Companys",
        "class" : "list(CivetCompanyCenter.Company)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryCompany$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Companys" : is.readList(3, true, TarsStream.List(CivetCompanyCenter.Company)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompany$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Companys" : tup.readList("Companys", TarsStream.List(CivetCompanyCenter.Company)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompany$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryCompany failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryCompany = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryCompany", __CivetCompanyCenter_CompanyManProcess$queryCompany$PE(offset, limit, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompany$PD, __CivetCompanyCenter_CompanyManProcess$queryCompany$ER);
    } else {
        return this._worker.tars_invoke("queryCompany", __CivetCompanyCenter_CompanyManProcess$queryCompany$IE(offset, limit), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompany$ID, __CivetCompanyCenter_CompanyManProcess$queryCompany$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryCompany = __CivetCompanyCenter_CompanyManProcess$queryCompany$IF;

var __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$IF = {
    "name" : "queryCompanyByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "Companys",
        "class" : "list(CivetCompanyCenter.Company)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Companys" : is.readList(5, true, TarsStream.List(CivetCompanyCenter.Company)),
                    "count" : is.readInt32(6, true, 0),
                    "result" : is.readInt32(7, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Companys" : tup.readList("Companys", TarsStream.List(CivetCompanyCenter.Company)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryCompanyByCondition failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryCompanyByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryCompanyByCondition", __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$PD, __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryCompanyByCondition", __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$ID, __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryCompanyByCondition = __CivetCompanyCenter_CompanyManProcess$queryCompanyByCondition$IF;

var __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$IF = {
    "name" : "queryCompanyPermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Permissions",
        "class" : "list(CivetCompanyCenter.CPermission)",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$IE = function (CompanyID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Permissions" : is.readList(2, true, TarsStream.List(CivetCompanyCenter.CPermission)),
                    "result" : is.readInt32(3, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$PE = function (CompanyID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyID", CompanyID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Permissions" : tup.readList("Permissions", TarsStream.List(CivetCompanyCenter.CPermission)),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryCompanyPermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryCompanyPermissions = function (CompanyID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryCompanyPermissions", __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$PE(CompanyID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$PD, __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$ER);
    } else {
        return this._worker.tars_invoke("queryCompanyPermissions", __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$IE(CompanyID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$ID, __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryCompanyPermissions = __CivetCompanyCenter_CompanyManProcess$queryCompanyPermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$IF = {
    "name" : "queryCompanyRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Companys",
        "class" : "list(CivetCompanyCenter.CompanyHasRole)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Companys" : is.readList(3, true, TarsStream.List(CivetCompanyCenter.CompanyHasRole)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Companys" : tup.readList("Companys", TarsStream.List(CivetCompanyCenter.CompanyHasRole)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryCompanyRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryCompanyRole = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryCompanyRole", __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$PE(offset, limit, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyRole$PD, __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$ER);
    } else {
        return this._worker.tars_invoke("queryCompanyRole", __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$IE(offset, limit), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyRole$ID, __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryCompanyRole = __CivetCompanyCenter_CompanyManProcess$queryCompanyRole$IF;

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$IF = {
    "name" : "queryCompanyRoleByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "binds",
        "class" : "list(CivetCompanyCenter.CompanyHasRole)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "binds" : is.readList(5, true, TarsStream.List(CivetCompanyCenter.CompanyHasRole)),
                    "count" : is.readInt32(6, true, 0),
                    "result" : is.readInt32(7, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "binds" : tup.readList("binds", TarsStream.List(CivetCompanyCenter.CompanyHasRole)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryCompanyRoleByCondition failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryCompanyRoleByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryCompanyRoleByCondition", __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$PD, __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryCompanyRoleByCondition", __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$ID, __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryCompanyRoleByCondition = __CivetCompanyCenter_CompanyManProcess$queryCompanyRoleByCondition$IF;

var __CivetCompanyCenter_CompanyManProcess$queryPermissions$IF = {
    "name" : "queryPermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Permissions",
        "class" : "list(CivetCompanyCenter.CPermission)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissions$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Permissions" : is.readList(3, true, TarsStream.List(CivetCompanyCenter.CPermission)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissions$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Permissions" : tup.readList("Permissions", TarsStream.List(CivetCompanyCenter.CPermission)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryPermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryPermissions = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryPermissions", __CivetCompanyCenter_CompanyManProcess$queryPermissions$PE(offset, limit, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$queryPermissions$PD, __CivetCompanyCenter_CompanyManProcess$queryPermissions$ER);
    } else {
        return this._worker.tars_invoke("queryPermissions", __CivetCompanyCenter_CompanyManProcess$queryPermissions$IE(offset, limit), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$queryPermissions$ID, __CivetCompanyCenter_CompanyManProcess$queryPermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryPermissions = __CivetCompanyCenter_CompanyManProcess$queryPermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$IF = {
    "name" : "queryPermissionsByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "Permissionsout",
        "class" : "list(CivetCompanyCenter.CPermission)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Permissionsout" : is.readList(5, true, TarsStream.List(CivetCompanyCenter.CPermission)),
                    "count" : is.readInt32(6, true, 0),
                    "result" : is.readInt32(7, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Permissionsout" : tup.readList("Permissionsout", TarsStream.List(CivetCompanyCenter.CPermission)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryPermissionsByCondition failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryPermissionsByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryPermissionsByCondition", __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$PD, __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryPermissionsByCondition", __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$ID, __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryPermissionsByCondition = __CivetCompanyCenter_CompanyManProcess$queryPermissionsByCondition$IF;

var __CivetCompanyCenter_CompanyManProcess$queryRole$IF = {
    "name" : "queryRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "role",
        "class" : "list(CivetCompanyCenter.Role)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryRole$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "role" : is.readList(3, true, TarsStream.List(CivetCompanyCenter.Role)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRole$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "role" : tup.readList("role", TarsStream.List(CivetCompanyCenter.Role)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryRole = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRole", __CivetCompanyCenter_CompanyManProcess$queryRole$PE(offset, limit, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRole$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRole$PD, __CivetCompanyCenter_CompanyManProcess$queryRole$ER);
    } else {
        return this._worker.tars_invoke("queryRole", __CivetCompanyCenter_CompanyManProcess$queryRole$IE(offset, limit), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRole$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRole$ID, __CivetCompanyCenter_CompanyManProcess$queryRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryRole = __CivetCompanyCenter_CompanyManProcess$queryRole$IF;

var __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$IF = {
    "name" : "queryRoleByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "role",
        "class" : "list(CivetCompanyCenter.Role)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "role" : is.readList(5, true, TarsStream.List(CivetCompanyCenter.Role)),
                    "count" : is.readInt32(6, true, 0),
                    "result" : is.readInt32(7, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "role" : tup.readList("role", TarsStream.List(CivetCompanyCenter.Role)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryRoleByCondition failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryRoleByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRoleByCondition", __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$PD, __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryRoleByCondition", __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$ID, __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryRoleByCondition = __CivetCompanyCenter_CompanyManProcess$queryRoleByCondition$IF;

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$IF = {
    "name" : "queryRolePermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "Companys",
        "class" : "list(CivetCompanyCenter.RoleHasPermission)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$IE = function (offset, limit) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "Companys" : is.readList(3, true, TarsStream.List(CivetCompanyCenter.RoleHasPermission)),
                    "count" : is.readInt32(4, true, 0),
                    "result" : is.readInt32(5, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$PE = function (offset, limit, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "Companys" : tup.readList("Companys", TarsStream.List(CivetCompanyCenter.RoleHasPermission)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryRolePermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryRolePermissions = function (offset, limit) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRolePermissions", __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$PE(offset, limit, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRolePermissions$PD, __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$ER);
    } else {
        return this._worker.tars_invoke("queryRolePermissions", __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$IE(offset, limit), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRolePermissions$ID, __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryRolePermissions = __CivetCompanyCenter_CompanyManProcess$queryRolePermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$IF = {
    "name" : "queryRolePermissionsByCondition",
    "return" : "int32",
    "arguments" : [{
        "name" : "offset",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "limit",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "binds",
        "class" : "list(CivetCompanyCenter.RoleHasPermission)",
        "direction" : "out"
    }, {
        "name" : "count",
        "class" : "int32",
        "direction" : "out"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$IE = function (offset, limit, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, offset);
    os.writeInt32(2, limit);
    os.writeString(3, keys);
    os.writeString(4, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "binds" : is.readList(5, true, TarsStream.List(CivetCompanyCenter.RoleHasPermission)),
                    "count" : is.readInt32(6, true, 0),
                    "result" : is.readInt32(7, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$PE = function (offset, limit, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("offset", offset);
    tup.writeInt32("limit", limit);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "binds" : tup.readList("binds", TarsStream.List(CivetCompanyCenter.RoleHasPermission)),
                    "count" : tup.readInt32("count"),
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::queryRolePermissionsByCondition failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.queryRolePermissionsByCondition = function (offset, limit, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("queryRolePermissionsByCondition", __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$PE(offset, limit, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$PD, __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$ER);
    } else {
        return this._worker.tars_invoke("queryRolePermissionsByCondition", __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$IE(offset, limit, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$IF).then(__CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$ID, __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.queryRolePermissionsByCondition = __CivetCompanyCenter_CompanyManProcess$queryRolePermissionsByCondition$IF;

var __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$IF = {
    "name" : "unBindCompanyAndRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "CompanyHasRoleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$IE = function (CompanyHasRoleID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, CompanyHasRoleID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$PE = function (CompanyHasRoleID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("CompanyHasRoleID", CompanyHasRoleID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::unBindCompanyAndRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.unBindCompanyAndRole = function (CompanyHasRoleID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("unBindCompanyAndRole", __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$PE(CompanyHasRoleID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$IF).then(__CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$PD, __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$ER);
    } else {
        return this._worker.tars_invoke("unBindCompanyAndRole", __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$IE(CompanyHasRoleID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$IF).then(__CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$ID, __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.unBindCompanyAndRole = __CivetCompanyCenter_CompanyManProcess$unBindCompanyAndRole$IF;

var __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$IF = {
    "name" : "unBindRoleAndPermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "RoleID",
        "class" : "int32",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$IE = function (RoleID) {
    var os = new TarsStream.TarsOutputStream();
    os.writeInt32(1, RoleID);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(2, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$PE = function (RoleID, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeInt32("RoleID", RoleID);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::unBindRoleAndPermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.unBindRoleAndPermissions = function (RoleID) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("unBindRoleAndPermissions", __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$PE(RoleID, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$PD, __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$ER);
    } else {
        return this._worker.tars_invoke("unBindRoleAndPermissions", __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$IE(RoleID), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$ID, __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.unBindRoleAndPermissions = __CivetCompanyCenter_CompanyManProcess$unBindRoleAndPermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$updateCompany$IF = {
    "name" : "updateCompany",
    "return" : "int32",
    "arguments" : [{
        "name" : "Company",
        "class" : "CivetCompanyCenter.Company",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$updateCompany$IE = function (Company, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, Company);
    os.writeString(2, keys);
    os.writeString(3, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$updateCompany$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$updateCompany$PE = function (Company, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("Company", Company);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$updateCompany$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$updateCompany$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::updateCompany failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.updateCompany = function (Company, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("updateCompany", __CivetCompanyCenter_CompanyManProcess$updateCompany$PE(Company, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$updateCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$updateCompany$PD, __CivetCompanyCenter_CompanyManProcess$updateCompany$ER);
    } else {
        return this._worker.tars_invoke("updateCompany", __CivetCompanyCenter_CompanyManProcess$updateCompany$IE(Company, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$updateCompany$IF).then(__CivetCompanyCenter_CompanyManProcess$updateCompany$ID, __CivetCompanyCenter_CompanyManProcess$updateCompany$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.updateCompany = __CivetCompanyCenter_CompanyManProcess$updateCompany$IF;

var __CivetCompanyCenter_CompanyManProcess$updatePermissions$IF = {
    "name" : "updatePermissions",
    "return" : "int32",
    "arguments" : [{
        "name" : "PermissionsID",
        "class" : "CivetCompanyCenter.CPermission",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$updatePermissions$IE = function (PermissionsID, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, PermissionsID);
    os.writeString(2, keys);
    os.writeString(3, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$updatePermissions$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$updatePermissions$PE = function (PermissionsID, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("PermissionsID", PermissionsID);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$updatePermissions$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$updatePermissions$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::updatePermissions failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.updatePermissions = function (PermissionsID, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("updatePermissions", __CivetCompanyCenter_CompanyManProcess$updatePermissions$PE(PermissionsID, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$updatePermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$updatePermissions$PD, __CivetCompanyCenter_CompanyManProcess$updatePermissions$ER);
    } else {
        return this._worker.tars_invoke("updatePermissions", __CivetCompanyCenter_CompanyManProcess$updatePermissions$IE(PermissionsID, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$updatePermissions$IF).then(__CivetCompanyCenter_CompanyManProcess$updatePermissions$ID, __CivetCompanyCenter_CompanyManProcess$updatePermissions$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.updatePermissions = __CivetCompanyCenter_CompanyManProcess$updatePermissions$IF;

var __CivetCompanyCenter_CompanyManProcess$updateRole$IF = {
    "name" : "updateRole",
    "return" : "int32",
    "arguments" : [{
        "name" : "role",
        "class" : "CivetCompanyCenter.Role",
        "direction" : "in"
    }, {
        "name" : "keys",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "value",
        "class" : "string",
        "direction" : "in"
    }, {
        "name" : "result",
        "class" : "int32",
        "direction" : "out"
    }]
};

var __CivetCompanyCenter_CompanyManProcess$updateRole$IE = function (role, keys, value) {
    var os = new TarsStream.TarsOutputStream();
    os.writeStruct(1, role);
    os.writeString(2, keys);
    os.writeString(3, value);
    return os.getBinBuffer();
};

var __CivetCompanyCenter_CompanyManProcess$updateRole$ID = function (data) {
    try {
        var is = new TarsStream.TarsInputStream(data.response.sBuffer);
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : is.readInt32(0, true, 0),
                "arguments" : {
                    "result" : is.readInt32(4, true, 0)
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$updateRole$PE = function (role, keys, value, __$PROTOCOL$VERSION) {
    var tup = new TarsStream.UniAttribute();
    tup.tupVersion = __$PROTOCOL$VERSION;
    tup.writeStruct("role", role);
    tup.writeString("keys", keys);
    tup.writeString("value", value);
    return tup;
};

var __CivetCompanyCenter_CompanyManProcess$updateRole$PD = function (data) {
    try {
        var tup = data.response.tup;
        return {
            "request" : data.request,
            "response" : {
                "costtime" : data.request.costtime,
                "return" : tup.readInt32("", 0),
                "arguments" : {
                    "result" : tup.readInt32("result")
                }
            }
        };
    } catch (e) {
        throw _makeError(data, e.message, TarsError.CLIENT.DECODE_ERROR);
    }
};

var __CivetCompanyCenter_CompanyManProcess$updateRole$ER = function (data) {
    throw _makeError(data, "Call CompanyManProcess::updateRole failed");
};

CivetCompanyCenter.CompanyManProcessProxy.prototype.updateRole = function (role, keys, value) {
    var version = this._worker.version;
    if (version === TarsStream.Tup.TUP_SIMPLE || version === TarsStream.Tup.TUP_COMPLEX) {
        return this._worker.tup_invoke("updateRole", __CivetCompanyCenter_CompanyManProcess$updateRole$PE(role, keys, value, version), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$updateRole$IF).then(__CivetCompanyCenter_CompanyManProcess$updateRole$PD, __CivetCompanyCenter_CompanyManProcess$updateRole$ER);
    } else {
        return this._worker.tars_invoke("updateRole", __CivetCompanyCenter_CompanyManProcess$updateRole$IE(role, keys, value), arguments[arguments.length - 1], __CivetCompanyCenter_CompanyManProcess$updateRole$IF).then(__CivetCompanyCenter_CompanyManProcess$updateRole$ID, __CivetCompanyCenter_CompanyManProcess$updateRole$ER);
    }
};
CivetCompanyCenter.CompanyManProcessProxy.updateRole = __CivetCompanyCenter_CompanyManProcess$updateRole$IF;



